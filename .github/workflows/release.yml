name: Release

on:
  push:
    branches: ["main"]
    tags: ["v*"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Setup cache
        id: cache
        uses: actions/cache@v4
        with:
          key: docker-mount-${{ hashFiles('Dockerfile') }}-${{ hashFiles('Cargo.lock') }}
          path: |
            ci-cache-app-target
            ci-cache-cargo-registry
            ci-cache-cargo-git
          restore-keys: |
            docker-mount-${{ hashFiles('Dockerfile') }}

      - name: Inject cache mount for Docker build
        uses: reproducible-containers/buildkit-cache-dance@v3.3.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-map: |
            {
              "ci-cache-app-target": "/app/target",
              "ci-cache-cargo-registry": "/usr/local/cargo/registry",
              "ci-cache-cargo-git": "/usr/local/cargo/git",
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha
          provenance: false

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
